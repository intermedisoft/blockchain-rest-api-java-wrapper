/**
 * LoopBack Application
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.AssetFromService;
import io.swagger.client.model.InlineResponse200;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AssetFromServiceApi
 */
public class AssetFromServiceApiTest {

    private final AssetFromServiceApi api = new AssetFromServiceApi();

    
    /**
     * Create a new instance of the model and persist it into the data source.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void assetFromServiceCreateTest() throws ApiException {
        AssetFromService data = null;
        // AssetFromService response = api.assetFromServiceCreate(data);

        // TODO: test validations
    }
    
    /**
     * Delete a model instance by {{id}} from the data source.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void assetFromServiceDeleteByIdTest() throws ApiException {
        String id = null;
        // Object response = api.assetFromServiceDeleteById(id);

        // TODO: test validations
    }
    
    /**
     * Check whether a model instance exists in the data source.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void assetFromServiceExistsTest() throws ApiException {
        String id = null;
        // InlineResponse200 response = api.assetFromServiceExists(id);

        // TODO: test validations
    }
    
    /**
     * Find all instances of the model matched by filter from the data source.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void assetFromServiceFindTest() throws ApiException {
        String filter = null;
        // List<AssetFromService> response = api.assetFromServiceFind(filter);

        // TODO: test validations
    }
    
    /**
     * Find a model instance by {{id}} from the data source.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void assetFromServiceFindByIdTest() throws ApiException {
        String id = null;
        String filter = null;
        // AssetFromService response = api.assetFromServiceFindById(id, filter);

        // TODO: test validations
    }
    
    /**
     * Replace attributes for a model instance and persist it into the data source.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void assetFromServiceReplaceByIdTest() throws ApiException {
        String id = null;
        AssetFromService data = null;
        // AssetFromService response = api.assetFromServiceReplaceById(id, data);

        // TODO: test validations
    }
    
}

/**
 * LoopBack Application
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import io.swagger.client.model.CheckupHistory;
import io.swagger.client.model.DiagHistory;
import io.swagger.client.model.DrugHistory;
import io.swagger.client.model.Patient;
import io.swagger.client.model.ProcedureHistory;
import io.swagger.client.model.ProtectedAsset;
import io.swagger.client.model.ServiceHistory;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class QueryApi {
    private ApiClient apiClient;

    public QueryApi() {
        this(Configuration.getDefaultApiClient());
    }

    public QueryApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for queryListAllCheckupHistoryOfPatient */
    private com.squareup.okhttp.Call queryListAllCheckupHistoryOfPatientCall(String patientIdParam, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'patientIdParam' is set
        if (patientIdParam == null) {
            throw new ApiException("Missing the required parameter 'patientIdParam' when calling queryListAllCheckupHistoryOfPatient(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/queries/listAllCheckupHistoryOfPatient".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (patientIdParam != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "patientIdParam", patientIdParam));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "text/xml", "application/javascript", "text/javascript"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Show all checkup history for specified patient
     * 
     * @param patientIdParam  (required)
     * @return List&lt;CheckupHistory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<CheckupHistory> queryListAllCheckupHistoryOfPatient(String patientIdParam) throws ApiException {
        ApiResponse<List<CheckupHistory>> resp = queryListAllCheckupHistoryOfPatientWithHttpInfo(patientIdParam);
        return resp.getData();
    }

    /**
     * Show all checkup history for specified patient
     * 
     * @param patientIdParam  (required)
     * @return ApiResponse&lt;List&lt;CheckupHistory&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<CheckupHistory>> queryListAllCheckupHistoryOfPatientWithHttpInfo(String patientIdParam) throws ApiException {
        com.squareup.okhttp.Call call = queryListAllCheckupHistoryOfPatientCall(patientIdParam, null, null);
        Type localVarReturnType = new TypeToken<List<CheckupHistory>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Show all checkup history for specified patient (asynchronously)
     * 
     * @param patientIdParam  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call queryListAllCheckupHistoryOfPatientAsync(String patientIdParam, final ApiCallback<List<CheckupHistory>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = queryListAllCheckupHistoryOfPatientCall(patientIdParam, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<CheckupHistory>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for queryListAllDiagHistoryOfPatient */
    private com.squareup.okhttp.Call queryListAllDiagHistoryOfPatientCall(String patientIdParam, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'patientIdParam' is set
        if (patientIdParam == null) {
            throw new ApiException("Missing the required parameter 'patientIdParam' when calling queryListAllDiagHistoryOfPatient(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/queries/listAllDiagHistoryOfPatient".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (patientIdParam != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "patientIdParam", patientIdParam));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "text/xml", "application/javascript", "text/javascript"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Show all diagnostic history for specified patient
     * 
     * @param patientIdParam  (required)
     * @return List&lt;DiagHistory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DiagHistory> queryListAllDiagHistoryOfPatient(String patientIdParam) throws ApiException {
        ApiResponse<List<DiagHistory>> resp = queryListAllDiagHistoryOfPatientWithHttpInfo(patientIdParam);
        return resp.getData();
    }

    /**
     * Show all diagnostic history for specified patient
     * 
     * @param patientIdParam  (required)
     * @return ApiResponse&lt;List&lt;DiagHistory&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DiagHistory>> queryListAllDiagHistoryOfPatientWithHttpInfo(String patientIdParam) throws ApiException {
        com.squareup.okhttp.Call call = queryListAllDiagHistoryOfPatientCall(patientIdParam, null, null);
        Type localVarReturnType = new TypeToken<List<DiagHistory>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Show all diagnostic history for specified patient (asynchronously)
     * 
     * @param patientIdParam  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call queryListAllDiagHistoryOfPatientAsync(String patientIdParam, final ApiCallback<List<DiagHistory>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = queryListAllDiagHistoryOfPatientCall(patientIdParam, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DiagHistory>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for queryListAllDrugHistoryOfPatient */
    private com.squareup.okhttp.Call queryListAllDrugHistoryOfPatientCall(String patientIdParam, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'patientIdParam' is set
        if (patientIdParam == null) {
            throw new ApiException("Missing the required parameter 'patientIdParam' when calling queryListAllDrugHistoryOfPatient(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/queries/listAllDrugHistoryOfPatient".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (patientIdParam != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "patientIdParam", patientIdParam));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "text/xml", "application/javascript", "text/javascript"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Show all drug history for specified patient
     * 
     * @param patientIdParam  (required)
     * @return List&lt;DrugHistory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DrugHistory> queryListAllDrugHistoryOfPatient(String patientIdParam) throws ApiException {
        ApiResponse<List<DrugHistory>> resp = queryListAllDrugHistoryOfPatientWithHttpInfo(patientIdParam);
        return resp.getData();
    }

    /**
     * Show all drug history for specified patient
     * 
     * @param patientIdParam  (required)
     * @return ApiResponse&lt;List&lt;DrugHistory&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DrugHistory>> queryListAllDrugHistoryOfPatientWithHttpInfo(String patientIdParam) throws ApiException {
        com.squareup.okhttp.Call call = queryListAllDrugHistoryOfPatientCall(patientIdParam, null, null);
        Type localVarReturnType = new TypeToken<List<DrugHistory>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Show all drug history for specified patient (asynchronously)
     * 
     * @param patientIdParam  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call queryListAllDrugHistoryOfPatientAsync(String patientIdParam, final ApiCallback<List<DrugHistory>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = queryListAllDrugHistoryOfPatientCall(patientIdParam, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DrugHistory>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for queryListAllGrantedPermission */
    private com.squareup.okhttp.Call queryListAllGrantedPermissionCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/queries/listAllGrantedPermission".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "text/xml", "application/javascript", "text/javascript"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * List all valid permission grant
     * 
     * @return List&lt;Patient&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Patient> queryListAllGrantedPermission() throws ApiException {
        ApiResponse<List<Patient>> resp = queryListAllGrantedPermissionWithHttpInfo();
        return resp.getData();
    }

    /**
     * List all valid permission grant
     * 
     * @return ApiResponse&lt;List&lt;Patient&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Patient>> queryListAllGrantedPermissionWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = queryListAllGrantedPermissionCall(null, null);
        Type localVarReturnType = new TypeToken<List<Patient>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all valid permission grant (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call queryListAllGrantedPermissionAsync(final ApiCallback<List<Patient>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = queryListAllGrantedPermissionCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Patient>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for queryListAllPendingPermissionRequest */
    private com.squareup.okhttp.Call queryListAllPendingPermissionRequestCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/queries/listAllPendingPermissionRequest".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "text/xml", "application/javascript", "text/javascript"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Get list of pending permission request of patient
     * 
     * @return List&lt;Patient&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Patient> queryListAllPendingPermissionRequest() throws ApiException {
        ApiResponse<List<Patient>> resp = queryListAllPendingPermissionRequestWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get list of pending permission request of patient
     * 
     * @return ApiResponse&lt;List&lt;Patient&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Patient>> queryListAllPendingPermissionRequestWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = queryListAllPendingPermissionRequestCall(null, null);
        Type localVarReturnType = new TypeToken<List<Patient>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of pending permission request of patient (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call queryListAllPendingPermissionRequestAsync(final ApiCallback<List<Patient>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = queryListAllPendingPermissionRequestCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Patient>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for queryListAllProcedureHistoryOfPatient */
    private com.squareup.okhttp.Call queryListAllProcedureHistoryOfPatientCall(String patientIdParam, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'patientIdParam' is set
        if (patientIdParam == null) {
            throw new ApiException("Missing the required parameter 'patientIdParam' when calling queryListAllProcedureHistoryOfPatient(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/queries/listAllProcedureHistoryOfPatient".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (patientIdParam != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "patientIdParam", patientIdParam));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "text/xml", "application/javascript", "text/javascript"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Show all procedure history for specified patient
     * 
     * @param patientIdParam  (required)
     * @return List&lt;ProcedureHistory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ProcedureHistory> queryListAllProcedureHistoryOfPatient(String patientIdParam) throws ApiException {
        ApiResponse<List<ProcedureHistory>> resp = queryListAllProcedureHistoryOfPatientWithHttpInfo(patientIdParam);
        return resp.getData();
    }

    /**
     * Show all procedure history for specified patient
     * 
     * @param patientIdParam  (required)
     * @return ApiResponse&lt;List&lt;ProcedureHistory&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ProcedureHistory>> queryListAllProcedureHistoryOfPatientWithHttpInfo(String patientIdParam) throws ApiException {
        com.squareup.okhttp.Call call = queryListAllProcedureHistoryOfPatientCall(patientIdParam, null, null);
        Type localVarReturnType = new TypeToken<List<ProcedureHistory>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Show all procedure history for specified patient (asynchronously)
     * 
     * @param patientIdParam  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call queryListAllProcedureHistoryOfPatientAsync(String patientIdParam, final ApiCallback<List<ProcedureHistory>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = queryListAllProcedureHistoryOfPatientCall(patientIdParam, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ProcedureHistory>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for queryListAllProtectedAssets */
    private com.squareup.okhttp.Call queryListAllProtectedAssetsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/queries/listAllProtectedAssets".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "text/xml", "application/javascript", "text/javascript"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * List all protected assets
     * 
     * @return List&lt;ProtectedAsset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ProtectedAsset> queryListAllProtectedAssets() throws ApiException {
        ApiResponse<List<ProtectedAsset>> resp = queryListAllProtectedAssetsWithHttpInfo();
        return resp.getData();
    }

    /**
     * List all protected assets
     * 
     * @return ApiResponse&lt;List&lt;ProtectedAsset&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ProtectedAsset>> queryListAllProtectedAssetsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = queryListAllProtectedAssetsCall(null, null);
        Type localVarReturnType = new TypeToken<List<ProtectedAsset>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all protected assets (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call queryListAllProtectedAssetsAsync(final ApiCallback<List<ProtectedAsset>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = queryListAllProtectedAssetsCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ProtectedAsset>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for queryListAllServiceHistoryOfPatient */
    private com.squareup.okhttp.Call queryListAllServiceHistoryOfPatientCall(String patientIdParam, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'patientIdParam' is set
        if (patientIdParam == null) {
            throw new ApiException("Missing the required parameter 'patientIdParam' when calling queryListAllServiceHistoryOfPatient(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/queries/listAllServiceHistoryOfPatient".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (patientIdParam != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "patientIdParam", patientIdParam));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "text/xml", "application/javascript", "text/javascript"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded", "application/xml", "text/xml"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Show all service history for specified patient
     * 
     * @param patientIdParam  (required)
     * @return List&lt;ServiceHistory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ServiceHistory> queryListAllServiceHistoryOfPatient(String patientIdParam) throws ApiException {
        ApiResponse<List<ServiceHistory>> resp = queryListAllServiceHistoryOfPatientWithHttpInfo(patientIdParam);
        return resp.getData();
    }

    /**
     * Show all service history for specified patient
     * 
     * @param patientIdParam  (required)
     * @return ApiResponse&lt;List&lt;ServiceHistory&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ServiceHistory>> queryListAllServiceHistoryOfPatientWithHttpInfo(String patientIdParam) throws ApiException {
        com.squareup.okhttp.Call call = queryListAllServiceHistoryOfPatientCall(patientIdParam, null, null);
        Type localVarReturnType = new TypeToken<List<ServiceHistory>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Show all service history for specified patient (asynchronously)
     * 
     * @param patientIdParam  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call queryListAllServiceHistoryOfPatientAsync(String patientIdParam, final ApiCallback<List<ServiceHistory>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = queryListAllServiceHistoryOfPatientCall(patientIdParam, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ServiceHistory>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
